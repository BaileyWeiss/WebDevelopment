<section class="reviewsection" style="padding-bottom: 15px;">
  <!--====== Headers ======-->    
  <div class="col-lg">
    <div class="row">
      <center><h1 style="padding-top: 15px; text-transform: uppercase; color:{{ section.settings.headingcolor }}">{{ section.settings.header }}</h1></center>
    </div>
    
    <div class="row">
      <center><h3 style="text-shadow: #FC0 1px 0 10px; text-transform: uppercase; color:{{ section.settings.subheadingcolor }}">{{ section.settings.subheader }}</h3></center>
    </div>
  </div>  

  <!--====== Review Carousel ======-->
  <div class="review-carousel-container" style="padding: 20px; position: relative; overflow: hidden;">
    <div class="review-carousel" id="reviewCarousel">
      {% for block in section.blocks %}
        <div class="review-slide">
          <section class="IndividualReview">
            <div class="review-content">
              <center>
                <div class="author-section">
                  <b><a href="{{ block.settings.url }}">{{ block.settings.author }}</a></b>
                </div>
                {% if block.settings.location != blank %}
                  <div class="location-section">
                    <span>{{ block.settings.location }}</span>
                  </div>
                {% endif %}
                <div class="stars">
                  <img width="20px" height="auto" src="{{ 'Star.png' | asset_img_url: '150x' }}" alt="Star">
                  <img width="20px" height="auto" src="{{ 'Star.png' | asset_img_url: '150x' }}" alt="Star">
                  <img width="20px" height="auto" src="{{ 'Star.png' | asset_img_url: '150x' }}" alt="Star">
                  <img width="20px" height="auto" src="{{ 'Star.png' | asset_img_url: '150x' }}" alt="Star">
                  <img width="20px" height="auto" src="{{ 'Star.png' | asset_img_url: '150x' }}" alt="Star">
                </div>
              </center>
              <div class="review-text">
                <center>
                  <p>{{ block.settings.text }}</p>
                </center>
              </div>
            </div>
          </section>
        </div>
      {% endfor %}
    </div>
    
    <!-- Navigation Arrows -->
    <button class="carousel-nav prev" onclick="moveSlide(-1)">‹</button>
    <button class="carousel-nav next" onclick="moveSlide(1)">›</button>
    
    <!-- Dots Indicator -->
    <div class="carousel-dots" id="carouselDots">
      <!-- Dots will be generated by JavaScript -->
    </div>
  </div>
</section>

<style>
.review-carousel-container {
  max-width: 1200px;
  margin: 0 auto;
  position: relative;
}

.review-carousel {
  display: flex;
  transition: transform 0.5s ease;
  width: 100%;
  align-items: stretch;
}

.review-slide {
  flex: 0 0 33.333%;
  box-sizing: border-box;
  padding: 0 15px;
  display: flex;
}

.IndividualReview {
  background: #f9f9f9;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  width: 100%;
  min-height: 300px;
  display: flex;
  flex-direction: column;
}

.review-content {
  padding: 30px 25px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100%;
  flex-grow: 1;
}

.author-section {
  margin-bottom: 15px;
}

.author-section a {
  text-decoration: none;
  color: #333;
  font-size: 18px;
  font-weight: bold;
}

.location-section {
  margin-bottom: 10px;
  margin-top: 8px;
}

.location-section span {
  color: #888;
  font-size: 14px;
  font-style: italic;
}

.stars {
  margin: 15px 0 20px 0;
  display: flex;
  justify-content: center;
  gap: 3px;
}

.review-text {
  flex-grow: 1;
  display: flex;
  align-items: center;
}

.review-text p {
  text-wrap: balance;
  overflow-wrap: break-word;
  line-height: 1.6;
  color: #666;
  font-size: 16px;
  margin: 0;
  text-align: center;
}

.carousel-nav {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(0,0,0,0.6);
  color: white;
  border: none;
  padding: 15px 20px;
  border-radius: 50%;
  cursor: pointer;
  z-index: 10;
  font-size: 24px;
  font-weight: bold;
  transition: background 0.3s ease;
}

.carousel-nav:hover {
  background: rgba(0,0,0,0.8);
}

.carousel-nav.prev {
  left: 10px;
}

.carousel-nav.next {
  right: 10px;
}

.carousel-dots {
  text-align: center;
  margin-top: 30px;
}

.dot {
  height: 14px;
  width: 14px;
  margin: 0 6px;
  background-color: #bbb;
  border-radius: 50%;
  display: inline-block;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.dot:hover {
  background-color: #888;
}

.dot.active {
  background-color: #333;
}

/* Mobile Styles */
@media (max-width: 768px) {
  .review-slide {
    flex: 0 0 100%;
    padding: 0 10px;
  }
  
  .IndividualReview {
    min-height: 250px;
  }
  
  .review-content {
    padding: 25px 20px;
  }
  
  .carousel-nav {
    padding: 10px 15px;
    font-size: 20px;
  }
  
  .review-text p {
    font-size: 15px;
  }
}

/* Tablet Styles */
@media (min-width: 769px) and (max-width: 1024px) {
  .review-slide {
    flex: 0 0 50%;
  }
  
  .IndividualReview {
    min-height: 280px;
  }
}

/* Large Desktop */
@media (min-width: 1200px) {
  .IndividualReview {
    min-height: 320px;
  }
  
  .review-content {
    padding: 35px 30px;
  }
}
</style>

<script>
// Global variables
let currentSlideIndex = 0;
let slidesPerView = 3; // Default for desktop
const totalSlides = {{ section.blocks.size }};
let maxSlideIndex = 0;

// Initialize the carousel
function initCarousel() {
  // Determine slides per view based on screen width
  updateSlidesPerView();
  
  // Generate dots
  generateDots();
  
  // Set initial state
  updateCarousel();
  updateDots();
  
  // Set up event listeners
  window.addEventListener('resize', handleResize);
  
  // Set up touch events for mobile
  setupTouchEvents();
  
  // Start auto-sliding
  startAutoSlide();
  
  console.log(`Carousel initialized with ${totalSlides} slides, showing ${slidesPerView} at a time`);
}

// Update slides per view based on screen width
function updateSlidesPerView() {
  if (window.innerWidth <= 768) {
    slidesPerView = 1; // Mobile
  } else if (window.innerWidth <= 1024) {
    slidesPerView = 2; // Tablet
  } else {
    slidesPerView = 3; // Desktop
  }
  
  // Calculate max slide index
  maxSlideIndex = Math.max(0, totalSlides - slidesPerView);
  
  // Ensure current index is valid
  if (currentSlideIndex > maxSlideIndex) {
    currentSlideIndex = maxSlideIndex;
  }
  
  console.log(`Updated: ${slidesPerView} slides per view, max index: ${maxSlideIndex}`);
}

// Generate dot indicators
function generateDots() {
  const dotsContainer = document.getElementById('carouselDots');
  dotsContainer.innerHTML = '';
  
  // Calculate number of pages
  const numPages = Math.ceil(totalSlides / slidesPerView);
  
  for (let i = 0; i < numPages; i++) {
    const dot = document.createElement('span');
    dot.className = 'dot';
    dot.onclick = function() { goToSlide(i * slidesPerView); };
    dotsContainer.appendChild(dot);
  }
  
  console.log(`Generated ${numPages} dot indicators`);
}

// Move slide in a direction
function moveSlide(direction) {
  // Calculate new index
  let newIndex = currentSlideIndex + direction;
  
  // Handle wrapping
  if (newIndex < 0) {
    newIndex = maxSlideIndex;
  } else if (newIndex > maxSlideIndex) {
    newIndex = 0;
  }
  
  goToSlide(newIndex);
}

// Go to a specific slide
function goToSlide(index) {
  currentSlideIndex = index;
  updateCarousel();
  updateDots();
  resetAutoSlide();
}

// Update carousel position
function updateCarousel() {
  const carousel = document.getElementById('reviewCarousel');
  const slideWidth = 100 / slidesPerView;
  const translateX = -(currentSlideIndex * slideWidth);
  carousel.style.transform = `translateX(${translateX}%)`;
  
  console.log(`Moving to slide ${currentSlideIndex}, translateX: ${translateX}%`);
}

// Update dot indicators
function updateDots() {
  const dots = document.querySelectorAll('.dot');
  const activeDotIndex = Math.floor(currentSlideIndex / slidesPerView);
  
  dots.forEach((dot, index) => {
    dot.classList.toggle('active', index === activeDotIndex);
  });
}

// Handle window resize
function handleResize() {
  const oldSlidesPerView = slidesPerView;
  
  // Update slides per view
  updateSlidesPerView();
  
  // If the number of slides per view changed, regenerate dots
  if (oldSlidesPerView !== slidesPerView) {
    generateDots();
  }
  
  // Update carousel and dots
  updateCarousel();
  updateDots();
  
  console.log(`Window resized, slides per view: ${slidesPerView}`);
}

// Set up touch events for mobile
function setupTouchEvents() {
  let startX = 0;
  const carousel = document.getElementById('reviewCarousel');
  
  carousel.addEventListener('touchstart', function(e) {
    startX = e.touches[0].clientX;
  });
  
  carousel.addEventListener('touchend', function(e) {
    const endX = e.changedTouches[0].clientX;
    const diff = startX - endX;
    
    // If the swipe was significant enough
    if (Math.abs(diff) > 50) {
      if (diff > 0) {
        moveSlide(1); // Swipe left - next slide
      } else {
        moveSlide(-1); // Swipe right - previous slide
      }
    }
  });
}

// Auto-slide functionality
let autoSlideTimer;

function startAutoSlide() {
  autoSlideTimer = setInterval(function() {
    moveSlide(1);
  }, 5000);
}

function resetAutoSlide() {
  clearInterval(autoSlideTimer);
  startAutoSlide();
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', initCarousel);
</script>

{% schema %}
{
  "name": "Reviews",
  "settings": [
    {
      "type": "text",
      "id": "header",
      "label": "Main Header"
    },
    {
      "type": "text",
      "id": "subheader",
      "label": "Sub-Header"
    },
    {
      "type": "color",
      "id": "headingcolor",
      "label": "Heading Color",
      "default": "#fff"
    },
    {
      "type": "color",
      "id": "subheadingcolor",
      "label": "Subheading Color",
      "default": "#E3E3E3"
    }
  ],
  "presets": [{"name": "Review Slideshow"}],
  "tag": "header",
  "class": "customblock",
  "blocks": [
    {
      "name": "Testimonial",
      "type": "review",
      "settings": [
        {
          "type": "text",
          "id": "author",
          "label": "Full Name of Reviewer"
        },
        {
          "type": "text",
          "id": "location",
          "label": "Location (City, State or Country)"
        },
        {
          "type": "text",
          "id": "text",
          "label": "Review"
        },
        {
          "type": "url",
          "id": "url",
          "label": "Link to Review"
        }
      ]
    }
  ]
}
{% endschema %}